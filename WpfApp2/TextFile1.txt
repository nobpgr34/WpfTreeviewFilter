            //textBlock.Inlines.Add(new InlineUIContainer
            //{
            //    Child = new TextBlock
            //    {
            //        Text = firstText,
            //    }
            //});
            //textBlock.Inlines.Add(new InlineUIContainer
            //{
            //    Child = new TextBlock
            //    {
            //        Text = boldText,
            //        Background=new SolidColorBrush(Colors.IndianRed)
            //    }
            //});
            //textBlock.Inlines.Add(new InlineUIContainer
            //{
            //    Child = new TextBlock
            //    {
            //        Text = restText,
            //    }
            //});
            // Inject to inlines
         //   textBlock.Inlines.Add(firstResult);
            //textBlock.Inlines.Add(boldResult);
            //textBlock.Inlines.Add(restResult);
            List<Inline> _inlinesToRemove = new List<Inline>();
            bool lineBreakFound = false;
            var count = VisualTreeHelper.GetChildrenCount(textBlock);
            //for (int i = 0; i < count; i++)
            //{
            //    Inline _inline = (Inline)VisualTreeHelper.GetChild(textBlock, i);

            //    if (_inline is LineBreak)
            //    {
            //        lineBreakFound = true;
            //        _inlinesToRemove.Add(_inline); // remove the line break as well 
            //    }
            //    // not use else here
            //    if (lineBreakFound)
            //    {
            //        _inlinesToRemove.Add(_inline);
            //    }
            //}

            //foreach (Inline _inline in _inlinesToRemove)
            //{
            //    textBlock.Inlines.Remove(_inline);
            //} 

			      firstText = firstText.Replace("&", "&amp;");
            var first =string.Format( @"<Span xml:space=""preserve"" xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"">
{0}
</Span>", firstText);
            
            var firstResult = LoadXaml<Span>(first);

			   var bold = string.Format(@"<Bold xml:space=""preserve"" xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"">
{0}
</Bold>", boldText);

            var boldResult = LoadXaml<Bold>(bold);
			   //    boldText=    boldText.Replace("&", "&amp;");
         

            // add the rest of the text

			     var restResult = LoadXaml<Span>(rest);

            // Clear current textBlock

			  restText    = restText.Replace("&", "&amp;");
            var rest = string.Format(@"<Span xml:space=""preserve"" xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"">
{0}
</Span>", restText);

//public static void Window_DataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        //{
        //    object oldDataContext = e.OldValue;

        //}

         
         
		   //var query = value.ToUpper();
            //var indexOfSearch = name.ToUpper().IndexOf(query, 0);
            //if (indexOfSearch < 0) return;
            //var firstText = name.Substring(0, indexOfSearch);
            //var boldText = name.Substring(indexOfSearch, query.Length);
            //var restStartIndex = indexOfSearch + query.Length;
            //var restText = name.Substring(restStartIndex, name.Length - restStartIndex);
           

		    <!--<Setter Property="Visibility">
                        <!--<local:BcpBinding Converter="{StaticResource some-converter}" Mode="TwoWay" 
            ConverterParameters="Binding Path=FirstName,
              Binding Path=LastName">
                            Binding Path=FirstName
            Binding Path=LastName
                        </local:BcpBinding>-->
                        <!--<Setter.Value>
                            <MultiBinding Converter ="{StaticResource ExtendConverter}">
                                <Binding Path="." />
                                <Binding ElementName="queryTextBox" Path="Text" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>-->-->